import java.io.BufferedReader;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.Socket;
import java.security.PublicKey;
import java.util.Scanner;

import javax.swing.ImageIcon;
import javax.swing.JTextArea;
import javax.swing.text.DefaultCaret;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author Admin
 */
class ReceivedMessagesHandler  implements Runnable  {

	public BufferedReader server;
	public JTextArea Chat;
	public JTextArea Connect;
	public ReceivedMessagesHandler(InputStreamReader server, JTextArea Chat, JTextArea Connection) {
		this.server =  new BufferedReader(server);
;
		this.Chat = Chat;
		this.Connect = Connection;
	}

	@Override
	public void run() {
		// receive server messages and print out to screen
		String message;
	      try {
	        while ((message = this.server.readLine()) != null) {
	          //System.out.println(message);
	        	
	        	if (message.startsWith("Serveur")) 
	        	{	    
	        		if ( message.contains("connecté")) 
		        	{
		  	          	this.Chat.setText(this.Chat.getText()+message+"\n");

		        	}
	        		else if (message.contains("Liste client") || message.contains("déconnecter")) 
	        		{
	        			this.Connect.setText("");
	        			for (String msg : message.split(","))
	        			
	        			{
	        				if (!msg.contains("Liste client")) 
	        				{
	        					
	    		  	          	this.Connect.setText(this.Connect.getText()+msg+"\n");

	        				}
	        			}
	        		}
	        	
	        		
	        	}
	        	else {
	  	          	this.Chat.setText(this.Chat.getText()+message+"\n");

				}
	        } 
	      } catch (Exception ex) {
	        
	      }
	}
}
public class Client_Chat extends javax.swing.JFrame {
	
    public String nom;
    public Socket serveurSocket;
    public Boolean dark;
    /**
     * Creates new form Client_Chat
     */
    public Client_Chat(Socket serveur, String nom, Boolean dark) {
    	this.nom = nom;
    	this.serveurSocket = serveur;
        this.dark = dark;
		initComponents();
		
		try {
			new Thread(new ReceivedMessagesHandler(new InputStreamReader(serveur.getInputStream()), this.Texte_Chat, this.Texte_Connecté)).start();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		
		
        
        
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    public void initComponents() {

        Fenetre = new javax.swing.JPanel();
        Titre_Chat = new javax.swing.JLabel();
        Titre_Connecté = new javax.swing.JLabel();
        Panel_Chat = new javax.swing.JScrollPane();
        Texte_Chat = new javax.swing.JTextArea();
        Panel_Connecte = new javax.swing.JScrollPane();
        Texte_Connecté = new javax.swing.JTextArea();
        Button_Send_Message = new javax.swing.JButton();
        Input_Client = new javax.swing.JTextField();
        ImageIcon img = new ImageIcon("logo.jpg");
        setIconImage(img.getImage());        
        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);
        setTitle(this.nom+  " "+ this.serveurSocket.getInetAddress());
        if (dark) 
        {
        	setBackground(new java.awt.Color(0, 0, 0));
            Fenetre.setBackground(new java.awt.Color(0, 0, 0));
            Texte_Chat.setBackground(new java.awt.Color(0, 0, 0));
            Texte_Connecté.setBackground(new java.awt.Color(0, 0, 0));
            Button_Send_Message.setBackground(new java.awt.Color(0, 0, 0));
            Titre_Chat.setForeground(new java.awt.Color(255, 255, 255));
            Titre_Connecté.setForeground(new java.awt.Color(255, 255, 255));
            Texte_Chat.setForeground(new java.awt.Color(255, 255, 255));
            Texte_Connecté.setForeground(new java.awt.Color(255, 255, 255));
            Button_Send_Message.setForeground(new java.awt.Color(255, 255, 255));
            Input_Client.setForeground(new java.awt.Color(255, 255, 255));
            Input_Client.setBackground(new java.awt.Color(0, 0, 0));

        }
        else {
            setBackground(new java.awt.Color(255, 255, 255));
            Fenetre.setBackground(new java.awt.Color(255, 255, 255));
            Texte_Chat.setBackground(new java.awt.Color(255, 255, 255));
            Texte_Connecté.setBackground(new java.awt.Color(255, 255, 255));

		}

        Titre_Chat.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        Titre_Chat.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Titre_Chat.setText("Chat");

        Titre_Connecté.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        Titre_Connecté.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Titre_Connecté.setText("Connecté (s)");

        Texte_Chat.setEditable(false);
        Texte_Chat.setColumns(20);
        Texte_Chat.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        Texte_Chat.setRows(5);
        Texte_Chat.setText("");
        Texte_Chat.setToolTipText("");
        Texte_Chat.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        Panel_Chat.setViewportView(Texte_Chat);
        DefaultCaret caret = (DefaultCaret)Texte_Chat.getCaret();
        caret.setUpdatePolicy(DefaultCaret.ALWAYS_UPDATE);
        Texte_Connecté.setEditable(false);
        Texte_Connecté.setColumns(20);
        Texte_Connecté.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        Texte_Connecté.setRows(5);
        Texte_Connecté.setText("");
        Texte_Connecté.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        Panel_Connecte.setViewportView(Texte_Connecté);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });
        Button_Send_Message.setText("Envoyer");
        Button_Send_Message.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Button_Send_MessageActionPerformed(evt);
            }
        });

        Input_Client.setText("");
        Input_Client.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                Input_ClientKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout FenetreLayout = new javax.swing.GroupLayout(Fenetre);
        Fenetre.setLayout(FenetreLayout);
        FenetreLayout.setHorizontalGroup(
            FenetreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(FenetreLayout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addGroup(FenetreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(Panel_Chat, javax.swing.GroupLayout.DEFAULT_SIZE, 655, Short.MAX_VALUE)
                    .addComponent(Titre_Chat, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Input_Client))
                .addGap(52, 52, 52)
                .addGroup(FenetreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(Button_Send_Message, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Panel_Connecte)
                    .addComponent(Titre_Connecté, javax.swing.GroupLayout.PREFERRED_SIZE, 234, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(12, Short.MAX_VALUE))
        );
        FenetreLayout.setVerticalGroup(
            FenetreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(FenetreLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(FenetreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(FenetreLayout.createSequentialGroup()
                        .addComponent(Titre_Chat)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(Panel_Chat, javax.swing.GroupLayout.PREFERRED_SIZE, 360, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(FenetreLayout.createSequentialGroup()
                        .addComponent(Titre_Connecté)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(Panel_Connecte, javax.swing.GroupLayout.PREFERRED_SIZE, 363, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 51, Short.MAX_VALUE)
                .addGroup(FenetreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(Button_Send_Message, javax.swing.GroupLayout.DEFAULT_SIZE, 47, Short.MAX_VALUE)
                    .addComponent(Input_Client))
                .addGap(41, 41, 41))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(Fenetre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(Fenetre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>                        

    public void Button_Send_MessageActionPerformed(java.awt.event.ActionEvent evt) {                                                    
		if (this.Input_Client.getText().length()!=0) 
    	{
			try {
				
	    				
				PrintWriter out = new PrintWriter( this.serveurSocket.getOutputStream(), true);   		
				if ( this.Input_Client.getText().equals("bye")) 
				{
    				out.println(this.nom+" : "+ this.Input_Client.getText());
    				out.println("Serveur : Cet utilisateur vient de se déconnecter : "+ nom );

    				this.dispose();
    	    		this.serveurSocket.close();

				}
				out.println(this.nom+" : "+ this.Input_Client.getText());

				this.Input_Client.setText("");			
									
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
    		
    	}
    	
    }                                                   

    public void Input_ClientKeyPressed(java.awt.event.KeyEvent evt) {                                        
        // TODO add your handling code here:
    	
    	if (evt.getKeyCode()==10) 
    	{
    		if (this.Input_Client.getText().length()!=0) 
        	{
    			try {
    				
    	    				
    				PrintWriter out = new PrintWriter( this.serveurSocket.getOutputStream(), true);   		
    				if ( this.Input_Client.getText().equals("bye")) 
    				{
        				out.println(this.nom+" : "+ this.Input_Client.getText());
    					out.println("Serveur : Cet utilisateur vient de se déconnecter : "+ nom );

        				this.dispose();
        	    		this.serveurSocket.close();

    				}
    				out.println(this.nom+" : "+ this.Input_Client.getText());

    				this.Input_Client.setText("");			

    									
    									
    			} catch (IOException e) {
    				// TODO Auto-generated catch block
    				e.printStackTrace();
    			}
        		
        	}
    	}
    }     
    private void formWindowClosing(java.awt.event.WindowEvent evt) {       
    	
    	try {
			
    		PrintWriter out = new PrintWriter( this.serveurSocket.getOutputStream(), true);    			
			out.println("Serveur : Cet utilisateur vient de se déconnecter : "+ nom );
    		this.serveurSocket.close();
			
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
    	
        // TODO add your handling code here:
    } 

    /**
     * @param args the command line arguments
     */
    public static void start_gui_chat(Socket serveur, String nom, boolean dark) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Client_Chat.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Client_Chat.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Client_Chat.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Client_Chat.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Client_Chat(serveur, nom, dark).setVisible(true);
                
            }
        });
    }

    // Variables declaration - do not modify                     
    public javax.swing.JButton Button_Send_Message;
    public javax.swing.JPanel Fenetre;
    public javax.swing.JTextField Input_Client;
    public javax.swing.JScrollPane Panel_Chat;
    public javax.swing.JScrollPane Panel_Connecte;
    public javax.swing.JTextArea Texte_Chat;
    public javax.swing.JTextArea Texte_Connecté;
    public javax.swing.JLabel Titre_Chat;
    public javax.swing.JLabel Titre_Connecté;
    // End of variables declaration                   
}
